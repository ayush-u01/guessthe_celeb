// install flask - import req modules [Flask, request, jsonify]

0) created flask server

create app -> on top
 app = Flask(__name__)

add main method - this is located in end of file
if __name__ = '__main__':
    return app.run(port = (5000/5001) port no. )

create api in app - after creating app
@app.route('/classify_image', methods = ['GET', 'POST])

def classify_image(): // this fxn would be doing image classifaction using saved model in artifacts directory
    // write code
    return 'hi'

create util.py - becoz we want modular code

1) how can ui send image to backend
    - one way is you upload image in amazon s3 bucket and send link of s3 bucket in http request you making
    
    - or we can send base 64 encoded string - image is converted to base64 encoded string 
        using a fxn 
            def get_b64_test_image_for_virat():
                with open("b64.txt") as f:
                return f.read()

    ui will convert image to base 64

    so we are doing both ways if you pass b64 image or you pass img path directly we will classify using both 
    thats why 

    def classify_image(image_base64_data, file_path=None): / in case if you want to pass image directly 


    end goal - 

    if __name__ = '__main__':
        print(classify_image(b64_image, None))

2) now after getting image into backend by ui - you have to apply models to predict image 

    - first u need to load saved artifacts which you created by training the model - 
        so create load_saved_artifacts() fxn :
            
        we will use 3 global variable 
        1) __model - for storing actual model 
        2) class_name_to_number , 3) class_number to name - dict to map - player with index n vice versa 

        def load_saved_artifacts():
            print("loading saved artifacts...start")

            global __class_name_to_number
            global __class_number_to_name

            #open class dict in read mode and use to fill __class_name_to_number and __class_number_to_name dictionaries

            with open("./artifacts/class_dictionary.json", "r") as f:
                __class_name_to_number = json.load(f)
                __class_number_to_name = {v:k for k,v in __class_name_to_number.items()}

            global __model
            # opening a file n loading this using joblib module and saving it to __model var - after this __model will have trained model
           
            if __model is None:
                with open('./artifacts/saved_model.pkl', 'rb') as f:
                    __model = joblib.load(f) # use joblib to load model 
            
            print("loading saved artifacts...done")


    - now after loading model our main task is to implement
        def classify_image(image_base64_data, file_path=None): 
            # firstly it want the cropped faces present in image having {clear face and eyes - (use cascade)} - it would return in form of array 
             # get images array - 
            imgs = get_cropped_image_if_2_eyes(file_path, image_base64_data) # fxn implemented below
           
            #create result array - to store - the actual imfo after prediction 
            result = []
            for img in imgs:
                # now for every img in this imgs array - scale it - do wavelet transform (imported form wavelet.py created again in server folder) - again scale - and create combined img - (org + wavelet)
                
                scalled_raw_img = cv2.resize(img, (32, 32))
                img_har = w2d(img,'db1',5)
                scalled_img_har = cv2.resize(img_har, (32, 32))
                combined_img = np.vstack((scalled_raw_img.reshape(32*32*3,1),scalled_img_har.reshape(32*32,1)))

                # now after getting this combined images array - convert it into 2d array - just for the reason that predict fxn expect it to be as array. 
                 # also we need to convert this in type float because some api we will be using later, they expect float datatype
                len_image_array = 32 * 32 * 3 * 32 * 32
                final = combined_img.reshape(1, len_image_array).astype(float)
       
                 # now i need my do prediction using MODEL which was loaded in __model var at 1st by using load saved artifacts() fxn to load model - saved in model.pkl file in artifacts
                result.append(__model.predict(final)[0])  # generally IT EXPECT 2D ARRAY - expecting no. of images - but for suppluing 1 image reshaping img to array    
            
            return result

    - u need to repeat some of things done while building model 
        - import all needed lib. 
        - use - get cropped image if 2 eyes - 
            for this fxn u need image from b64data 
                if image_path: 
                    img = cv2.imread(image_path)
                else:
                    img = get_cv2_image_from_base64_string(image_base64_data) # fxn implemented below 

                #convert these img to gray - 
                #use  face_cascade, eye_cascade from Cv2.CascadeClassifier
                
                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                faces = face_cascade.detectMultiScale(gray, 1.3, 5)

                #create array of cropped faces in pic using face_cascade and eye cascade on gray generated and append face into cropped faces if len(eyes) >= 2
                        cropped_faces = []
                        for (x,y,w,h) in faces:
                            roi_gray = gray[y:y+h, x:x+w]
                            roi_color = img[y:y+h, x:x+w]
                            eyes = eye_cascade.detectMultiScale(roi_gray)
                            if len(eyes) >= 2:
                                cropped_faces.append(roi_color)
                        return cropped_faces

               # finally return that array of cropped faces and give it to classify_image fxn 


        - now implement this get_cv2_image_from_base64_string fxn :
            def get_cv2_image_from_base64_string(b64str):
                
                # get encoded data 
                encoded_data = b64str.split(',')[1]
                
                # create np array - using from buffer fxn of numpy(np)
                nparr = np.frombuffer(base64.b64decoder(encoded_data), np.int8)
                
                img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                


    - 